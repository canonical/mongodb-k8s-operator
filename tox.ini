# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = format, lint, unit

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
lib_path = {tox_root}/lib/charms/mongodb
all_path = {[vars]src_path} {[vars]tests_path} {[vars]lib_path}

[testenv]
allowlist_externals = poetry
set_env =
  PYTHONPATH = {tox_root}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
pass_env =
  PYTHONPATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
deps =
    poetry

[testenv:format]
description = Apply coding style standards to code
commands =
    poetry install --only fmt
    poetry run isort {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands =
    poetry install --only fmt,lint
    poetry run codespell {[vars]lib_path}
    poetry run codespell {tox_root} --skip {tox_root}/.git --skip {tox_root}/.tox \
        --skip {tox_root}/build --skip {tox_root}/lib --skip {tox_root}/venv \
        --skip {tox_root}/.mypy_cache --skip {tox_root}/icon.svg
    # pflake8 wrapper supports config from pyproject.toml
    poetry run pflake8 {[vars]all_path}
    poetry run isort --check-only --diff {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests
commands =
    poetry install --with unit
    poetry export -f requirements.txt -o requirements.txt
    poetry run coverage run --source={[vars]src_path} \
        -m pytest -v --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report

[testenv:integration]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    poetry export -f requirements.txt -o requirements.txt
    poetry run pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/

[testenv:ha-integration]
description = Run HA integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    poetry export -f requirements.txt -o requirements.txt
    poetry run pytest -v --tb native --log-cli-level=INFO -s --durations=0 {posargs} {[vars]tests_path}/integration/ha_tests/test_ha.py

[testenv:tls-integration]
description = Run tls integration tests
pass_env =
    {[testenv]pass_env}
    CI
    CI_PACKED_CHARMS
commands =
    poetry install --with integration
    poetry export -f requirements.txt -o requirements.txt
    poetry run pytest -v --tb native --log-cli-level=INFO -s --durations=0 {posargs} {[vars]tests_path}/integration/tls_tests/test_tls.py
